{
	"info": {
		"_postman_id": "f6b7f512-560d-4761-b043-9fb563bae674",
		"name": "ABCall",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "30660012"
	},
	"item": [
		{
			"name": "users",
			"item": [
				{
					"name": "Reset",
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/reset",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"reset"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create User",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Status should be 201\"] = responseCode.code == 201;",
									"tests[\"Response has id\"] = jsonData.id !== undefined;",
									"tests[\"Response has createdAt\"] = jsonData.createdAt !== undefined;",
									"",
									"if(jsonData.id) {",
									"    pm.collectionVariables.set('USER_ID', jsonData.id);",
									"}",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const email = pm.variables.replaceIn(\"{{$randomEmail}}\").toLowerCase();",
									"const username = pm.variables.replaceIn(\"{{$randomDomainWord}}\").toLowerCase();",
									"const password = pm.variables.replaceIn(\"{{$randomPassword}}\").toLowerCase();",
									"const dni = pm.variables.replaceIn(\"{{$randomInt}}\");",
									"const fullname = pm.variables.replaceIn(\"{{$randomFullName}}\").toLowerCase();",
									"const phonenumber = pm.variables.replaceIn(\"{{$randomPhoneNumber}}\").replaceAll('-', '');",
									"",
									"pm.collectionVariables.set('USER_EMAIL', email);",
									"pm.collectionVariables.set('USER_USERNAME', username);",
									"pm.collectionVariables.set('USER_PASSWORD', password);",
									"pm.collectionVariables.set('USER_DNI', dni);",
									"pm.collectionVariables.set('USER_FULLNAME', fullname);",
									"pm.collectionVariables.set('USER_PHONENUMBER', phonenumber);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{USER_USERNAME}}\",\n    \"password\": \"{{USER_PASSWORD}}\",\n    \"email\": \"{{USER_EMAIL}}\",\n    \"dni\": \"{{USER_DNI}}\",\n    \"fullName\": \"{{USER_FULLNAME}}\",\n    \"phoneNumber\": \"{{USER_PHONENUMBER}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user - already exists",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 412\"] = responseCode.code == 412;",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{USER_USERNAME}}\",\n    \"password\": \"{{USER_PASSWORD}}\",\n    \"email\": \"{{USER_EMAIL}}\",\n    \"dni\": \"{{USER_DNI}}\",\n    \"fullName\": \"{{USER_FULLNAME}}\",\n    \"phoneNumber\": \"{{USER_PHONENUMBER}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create user - missing fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 400\"] = responseCode.code == 400;",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"fullName\": \"{{USER_FULLNAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate Token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Status should be 200\"] = responseCode.code == 200;",
									"tests[\"Response has id\"] = jsonData.id !== undefined;",
									"tests[\"Response has token\"] = jsonData.token !== undefined;",
									"tests[\"Response has expireAt\"] = jsonData.expireAt !== undefined;",
									"",
									"if(jsonData.token) {",
									"    pm.collectionVariables.set('USER_TOKEN', jsonData.token);",
									"}",
									"",
									"if(jsonData.id) {",
									"    pm.collectionVariables.set('USER_ID', jsonData.id);",
									"}"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{USER_USERNAME}}\",\n    \"password\": \"{{USER_PASSWORD}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/auth",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - bad credentials",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 404\"] = responseCode.code == 404;",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{USER_USERNAME}}\",\n    \"password\": \"{{USER_PASSWORD}}wrong\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/auth",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - user not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 404\"] = responseCode.code == 404;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"fake\",\n    \"password\": \"fake\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/auth",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Generate token - missing fields",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 400\"] = responseCode.code == 400;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"{{USER_USERNAME}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/auth",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"auth"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get info user",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"let jsonData = JSON.parse(responseBody);",
									"",
									"tests[\"Status should be 200\"] = responseCode.code == 200;",
									"",
									"tests[\"Response has id\"] = jsonData.id !== undefined;",
									"tests[\"Response has username\"] = jsonData.username !== undefined;",
									"tests[\"Response has email\"] = jsonData.email !== undefined;",
									"tests[\"Response has fullName\"] = jsonData.fullName !== undefined;",
									"tests[\"Response has dni\"] = jsonData.dni !== undefined;",
									"tests[\"Response has phoneNumber\"] = jsonData.phoneNumber !== undefined;",
									"tests[\"Response has status\"] = jsonData.status !== undefined;",
									"",
									"tests[\"ID has correct value\"] = jsonData.id.toString() === pm.collectionVariables.get(\"USER_ID\");",
									"tests[\"Username has correct value\"] = jsonData.username.toString() === pm.collectionVariables.get(\"USER_USERNAME\");",
									"tests[\"Email has correct value\"] = jsonData.email.toString() === pm.collectionVariables.get(\"USER_EMAIL\");",
									"tests[\"Fullname has correct value\"] = jsonData.fullName.toString() === pm.collectionVariables.get(\"USER_FULLNAME\");",
									"tests[\"DNI has correct value\"] = jsonData.dni.toString() === pm.collectionVariables.get(\"USER_DNI\");",
									"tests[\"Phonenumber has correct value\"] = jsonData.phoneNumber.toString() === pm.collectionVariables.get(\"USER_PHONENUMBER\");",
									"tests[\"Status has correct value\"] = jsonData.status.toString() === pm.collectionVariables.get(\"USER_STATUS\");",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/me",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get info user - no token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 403\"] = responseCode.code == 403;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/me",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get info user - invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 401\"] = responseCode.code == 401;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"protocolProfileBehavior": {
						"disableBodyPruning": true
					},
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{USER_TOKEN}}fake",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{USERS_URL}}/users/me",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"me"
							]
						}
					},
					"response": []
				},
				{
					"name": "Health check",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"tests[\"Status should be 200\"] = responseCode.code == 200;"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{USERS_URL}}/users/ping",
							"host": [
								"{{USERS_URL}}"
							],
							"path": [
								"users",
								"ping"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "incidents",
			"item": [
				{
					"name": "Get Incidents",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{INCIDENTS_URL}}/incidents",
							"host": [
								"{{INCIDENTS_URL}}"
							],
							"path": [
								"incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Incidents - User",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{INCIDENTS_URL}}/incidents?userId={{USER_ID}}",
							"host": [
								"{{INCIDENTS_URL}}"
							],
							"path": [
								"incidents"
							],
							"query": [
								{
									"key": "userId",
									"value": "{{USER_ID}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Incident 1",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{USER_ID}}\",\n    \"subject\": \"Server problem\",\n    \"description\": \"Server was down\",\n    \"originType\": \"web\"\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{INCIDENTS_URL}}/incidents",
							"host": [
								"{{INCIDENTS_URL}}"
							],
							"path": [
								"incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create Incident - Error",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"Server was down\",\n  \"status\": \"open\",\n  \"originType\": \"web\",\n  \"userId\": 1\n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{INCIDENTS_URL}}/incidents",
							"host": [
								"{{INCIDENTS_URL}}"
							],
							"path": [
								"incidents"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get Incident",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{INCIDENTS_URL}}/incidents/1",
							"host": [
								"{{INCIDENTS_URL}}"
							],
							"path": [
								"incidents",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Update Incident",
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"userId\": \"{{USER_ID}}\",\n    \"subject\": \"Server problem\",\n    \"description\": \"Server was down\",\n    \"status\": \"CLOSED\",\n    \"solution\": \"Server was restarted\",\n    \"solutionAgentId\": \"2\",  \n    \"solutionDate\": \"2024-09-30T14:30:00\" \n}\n",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{INCIDENTS_URL}}/incidents/1",
							"host": [
								"{{INCIDENTS_URL}}"
							],
							"path": [
								"incidents",
								"1"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete Incident",
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{INCIDENTS_URL}}/incidents/1",
							"host": [
								"{{INCIDENTS_URL}}"
							],
							"path": [
								"incidents",
								"1"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "USER_EMAIL",
			"value": ""
		},
		{
			"key": "USER_USERNAME",
			"value": ""
		},
		{
			"key": "USER_PASSWORD",
			"value": ""
		},
		{
			"key": "USER_DNI",
			"value": ""
		},
		{
			"key": "USER_FULLNAME",
			"value": ""
		},
		{
			"key": "USER_PHONENUMBER",
			"value": ""
		},
		{
			"key": "USER_STATUS",
			"value": ""
		},
		{
			"key": "USER_ID",
			"value": ""
		},
		{
			"key": "USER_TOKEN",
			"value": ""
		}
	]
}