steps:
  # Step 1: Install dependencies
  - name: python
    #entrypoint: pip
    #args: ["install", "-r", "requirements.txt", "--user"]
    entrypoint: bash
    env:
      - 'DB_USER=postgres'
      - 'DB_PASSWORD=postgres'
      - 'DB_HOST=localhost'
      - 'DB_PORT=5432'
      - 'DB_NAME=misw-incidents-db'
    args:
      - '-c'
      - |
        cd ms-incidents && \
        pip install -r requirements.txt && \
        pytest --cov=src --cov-fail-under=20 --junitxml=${SHORT_SHA}_test_log.xml

  # Step 2: Run unit tests with coverage
  - name: python
    #entrypoint: python
    #args: ["-m", "pytest", "--cov=src", "--cov-fail-under=70", "--junitxml=${SHORT_SHA}_test_log.xml"]
    entrypoint: bash
    env:
      - 'DB_USER=postgres'
      - 'DB_PASSWORD=postgres'
      - 'DB_HOST=localhost'
      - 'DB_PORT=5432'
      - 'DB_NAME=misw-users-db'
    args:
      - '-c'
      - |
        cd ms-users && \
        pip install -r requirements.txt && \
        pytest --cov=src --cov-fail-under=20 --junitxml=${SHORT_SHA}_test_log.xml


  # Step 3: If tests and coverage pass, build and push the Docker image for ms-incidents
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/ms-incidents', './ms-incidents']
  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ms-incidents']
  
  # Step 4: Deploy the ms-incidents service to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'ms-incidents',
           '--image', 'gcr.io/$PROJECT_ID/ms-incidents',
           '--port', '9877',
           '--project=miso-dan-2024',
           '--min-instances=0',
           '--max-instances=10',
           '--cpu=1',
           '--memory=512Mi',
           '--platform', 'managed',
           '--region', 'us-central1',
           '--network=vpn-services-g18',
           '--subnet=vpn-abcall-service',
           '--vpc-egress=private-ranges-only',
           '--set-env-vars', 'DB_HOST=192.168.0.3,DB_PORT=5432,DB_NAME=misw-incidents-db,DB_USER=postgres,DB_PASSWORD=postgres',
           '--set-cloudsql-instances=miso-dan-2024:us-central1:misw-pf-db-instance',
           '--no-cpu-boost',
           '--allow-unauthenticated'
           ]

  # Step 5: Build and push the ms-users container
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/ms-users', './ms-users']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ms-users']

  # Step 6: Deploy the ms-users service to Cloud Run with environment variables
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
          'run', 'deploy', 'ms-users',
          '--image', 'gcr.io/$PROJECT_ID/ms-users',
          '--port', '9876',
          '--project=miso-dan-2024',
          '--min-instances=0',
          '--max-instances=10',
          '--cpu=1',
          '--memory=512Mi',
          '--platform', 'managed',
          '--region', 'us-central1',
          '--network=vpn-services-g18',
          '--subnet=vpn-abcall-service',
          '--vpc-egress=private-ranges-only',
          '--set-env-vars', 'DB_HOST=192.168.0.3,DB_PORT=5432,DB_NAME=misw-users-db	,DB_USER=postgres,DB_PASSWORD=postgres',
          '--set-cloudsql-instances=miso-dan-2024:us-central1:misw-pf-db-instance',
          '--no-cpu-boost',
          '--allow-unauthenticated'
          ]

# Specify the images to push to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/ms-incidents'
  - 'gcr.io/$PROJECT_ID/ms-users'
