# substitutions:
#   _PORT_INCIDENTS: "9877"
#   _MIN_INSTANCES_INCIDENTS: "0"
#   _MAX_INSTANCES_INCIDENTS: "5"
#   _ZONE_CLOUDSQL: "us-central1"
#   _VPN_NETWORK: "vpn-services-g18"
#   _VPN_SUBNET: "vpn-abcall-service"
#   _DB_HOST_INCIDENTS: "192.168.32.11"
#   _DB_PORT_INCIDENTS: "5432"
#   _DB_NAME_INCIDENTS: "misw-incidents-db"
#   _DB_USER_INCIDENTS: "postgres"
#   _DB_PASSWORD_INCIDENTS: "postgres"
#   _INSTANCE_CLOUDSQL: "misw-pf-db-instance"
#   _PORT_USERS: "9876"
#   _MIN_INSTANCES_USERS: "0"
#   _MAX_INSTANCES_USERS: "5"
#   _DB_HOST_USERS: "192.168.32.11"
#   _DB_PORT_USERS: "5432"
#   _DB_NAME_USERS: "misw-users-db"
#   _DB_USER_USERS: "postgres"
#   _DB_PASSWORD_USERS: "postgres"
#   _PORT_CHATBOT: "9878"
#   _MIN_INSTANCES_CHATBOT: "0"
#   _MAX_INSTANCES_CHATBOT: "5"
#   _INCIDENT_SERVICE_INTERNAL_URL: "https://ms-incidents.internal"
#   _USERS_SERVICE_INTERNAL_URL: "https://ms-users.internal"
#   _CHATBOT_RULES_FILE: "/backend/ms-chatbot/src/chatbot_rules.txt"

steps:
  # Step 1: Install dependencies
  # - name: python
  #   entrypoint: bash
  #   args:
  #     - '-c'
  #     - |
  #       cd ms-incidents && \
  #       pip install -r requirements.txt && \
  #       pytest --cov=src --cov-fail-under=70 --junitxml=${SHORT_SHA}_test_log.xml

  # # Step 2: Run unit tests with coverage
  # - name: python
  #   entrypoint: bash
  #   args:
  #     - '-c'
  #     - |
  #       cd ms-users && \
  #       pip install -r requirements.txt && \
  #       pytest --cov=src --cov-fail-under=70 --junitxml=${SHORT_SHA}_test_log.xml


  # Step 3: If tests and coverage pass, build and push the Docker image for ms-incidents
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/ms-incidents', 'backend/ms-incidents']
  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ms-incidents']
  
  # Step 4: Deploy the ms-incidents service to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'ms-incidents',
           '--image', 'gcr.io/$PROJECT_ID/ms-incidents',
           '--port', '${_PORT_INCIDENTS}',
           '--project=$PROJECT_ID',
           '--min-instances=${_MIN_INSTANCES_INCIDENTS}',
           '--max-instances=${_MAX_INSTANCES_INCIDENTS}',
           '--cpu=1',
           '--memory=512Mi',
           '--platform', 'managed',
           '--region', '${_ZONE_CLOUDSQL}',
           '--network=${_VPN_NETWORK}',
           '--subnet=${_VPN_SUBNET}',
           '--vpc-egress=private-ranges-only',
           '--set-env-vars', 'DB_HOST=${_DB_HOST_INCIDENTS},DB_PORT=${_DB_PORT_INCIDENTS},DB_NAME=${_DB_NAME_INCIDENTS},DB_USER=${_DB_USER_INCIDENTS},DB_PASSWORD=${_DB_PASSWORD_INCIDENTS}',
           '--set-cloudsql-instances=$PROJECT_ID:${_ZONE_CLOUDSQL}:${_INSTANCE_CLOUDSQL}',
           '--no-cpu-boost',
           '--allow-unauthenticated'
           ]

  # Step 5: Build and push the ms-users container
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/ms-users', 'backend/ms-users']

  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ms-users']

  # Step 6: Deploy the ms-users service to Cloud Run with environment variables
  - name: 'gcr.io/cloud-builders/gcloud'
    args: [
          'run', 'deploy', 'ms-users',
          '--image', 'gcr.io/$PROJECT_ID/ms-users',
          '--port', '${_PORT_USERS}',
          '--project=$PROJECT_ID',
          '--min-instances=${_MIN_INSTANCES_USERS}',
          '--max-instances=${_MAX_INSTANCES_USERS}',
          '--cpu=1',
          '--memory=512Mi',
          '--platform', 'managed',
          '--region', '${_ZONE_CLOUDSQL}',
          '--network=${_VPN_NETWORK}',
          '--subnet=${_VPN_SUBNET}',
          '--vpc-egress=private-ranges-only',
          '--set-env-vars', 'DB_HOST=${_DB_HOST_USERS},DB_PORT=${_DB_PORT_USERS},DB_NAME=${_DB_NAME_USERS},DB_USER=${_DB_USER_USERS},DB_PASSWORD=${_DB_PASSWORD_USERS}',
          '--set-cloudsql-instances=$PROJECT_ID:${_ZONE_CLOUDSQL}:${_INSTANCE_CLOUDSQL}',
          '--no-cpu-boost',
          '--allow-unauthenticated'
          ]


  # Step 7: If tests and coverage pass, build and push the Docker image for ms-chatbot
  - name: 'gcr.io/cloud-builders/docker'
    args: ['build', '-t', 'gcr.io/$PROJECT_ID/ms-chatbot', 'backend/ms-chatbot']
  
  - name: 'gcr.io/cloud-builders/docker'
    args: ['push', 'gcr.io/$PROJECT_ID/ms-chatbot']
  
  # Step 8: Deploy the ms-incidents service to Cloud Run
  - name: 'gcr.io/cloud-builders/gcloud'
    args: ['run', 'deploy', 'ms-chatbot',
           '--image', 'gcr.io/$PROJECT_ID/ms-chatbot',
           '--port', '${_PORT_CHATBOT}',
           '--project=$PROJECT_ID',
           '--min-instances=${_MIN_INSTANCES_CHATBOT}',
           '--max-instances=${_MAX_INSTANCES_CHATBOT}',
           '--cpu=1',
           '--memory=256Mi',
           '--platform', 'managed',
           '--region', '${_ZONE_CLOUDSQL}',
           '--network=${_VPN_NETWORK}',
           '--subnet=${_VPN_SUBNET}',
           '--vpc-egress=private-ranges-only',
           '--set-env-vars', 'INCIDENT_SERVICE_URL=${_INCIDENT_SERVICE_INTERNAL_URL},USERS_SERVICE_URL=${_USERS_SERVICE_INTERNAL_URL},CHATBOT_RULES_FILE=${_CHATBOT_RULES_FILE}',
           '--no-cpu-boost',
           '--allow-unauthenticated'
           ]

# Specify the images to push to Container Registry
images:
  - 'gcr.io/$PROJECT_ID/ms-incidents'
  - 'gcr.io/$PROJECT_ID/ms-users'
  - 'gcr.io/$PROJECT_ID/ms-chatbot'
