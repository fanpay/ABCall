name: Auto - Prerelease - Ejecutar pruebas unitarias para todas las plataformas

on:
  push:
    branches:
      - main
      - release/**  # Para detectar cualquier rama que comience con 'release/'
  pull_request:
    branches:
      - main

jobs:
  backend_tests:
    name: Ejecutar pruebas unitarias y cobertura - BackEnd
    permissions: write-all
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [ubuntu-latest]
        service: [ms-incidents, ms-users, ms-chatbot]

    steps:
    - name: Checkout del repositorio
      uses: actions/checkout@v3

    - name: Cache de dependencias de Python
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Configuración de entorno de python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: Instalación de librerías y dependencias
      run: |
        python -m pip install --upgrade pip
        pip install -r backend/${{ matrix.service }}/requirements.txt
        pip install pytest pytest-cov

    - name: Correr pruebas unitarias y cobertura con pytest en ${{ matrix.service }}
      run: |
        cd backend/${{ matrix.service }}
        pytest --cov=src --cov-fail-under=70 --cov-report=html

  frontend_tests:
    name: Ejecutar pruebas unitarias y cobertura - FrontEnd
    permissions: write-all
    runs-on: ubuntu-latest
    steps:
    - name: Checkout del repositorio
      uses: actions/checkout@v3

    - name: Configuración de Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18'

    - name: Instalar dependencias de frontend
      run: |
        cd frontend/abcall-web
        npm install

    - name: Correr pruebas unitarias y verificar cobertura en abcall-web
      run: |
        cd frontend/abcall-web
        npm run test -- --code-coverage --watch=false
        if [ $(jq '.total.lines.pct' coverage/coverage-summary.json) -lt 70 ]; then exit 1; fi

  mobile_tests:
    name: Ejecutar pruebas unitarias y cobertura - Mobile
    permissions: write-all
    runs-on: ubuntu-latest

    strategy:
      matrix:
        api-level: [33]
        target: [default]
        arch: [x86_64]

    defaults:
      run:
        working-directory: mobile # Cambiar directorio de trabajo a 'mobile'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up JDK 8
      uses: actions/setup-java@v4
      with:
        java-version: '8'
        distribution: 'temurin'

    - name: Cache de dependencias de Gradle
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Update apt-get and install xmllint
      run: |
        apt-get update
        apt-get install -y libxml2-utils

    - name: Setup Android SDK
      uses: android-actions/setup-android@v3

    - name: Run Unit Tests
      run: ./gradlew testDebugUnitTest jacocoTestReport

    - name: Verify Coverage
      if: success()
      run: |
        # Calcula la cobertura de los ViewModels a partir del archivo XML de JaCoCo
        COVERAGE=$(xmllint --xpath "number(//report/package[@name='com/uniandes/abcall/viewmodel']/counter[@type='LINE']/@covered)" build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml)
        MISSED=$(xmllint --xpath "number(//report/package[@name='com/uniandes/abcall/viewmodel']/counter[@type='LINE']/@missed)" build/reports/jacoco/jacocoTestReport/jacocoTestReport.xml)
        TOTAL=$((COVERAGE + MISSED))
        PERCENT=$((COVERAGE * 100 / TOTAL))
        echo "Line Coverage for ViewModels: $PERCENT%"
        if [ $PERCENT -lt 70 ]; then
          echo "Coverage for ViewModels is below 70%"
          exit 1
        fi
      continue-on-error: false
